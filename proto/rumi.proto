syntax = "proto3";
package rumi;

// The discovery service definition
service Discovery {
    // Get the current Merkle root
    rpc GetMerkleRoot (GetMerkleRootRequest) returns (GetMerkleRootResponse);
    
    // Get the current public set
    rpc GetPublicSet (GetPublicSetRequest) returns (GetPublicSetResponse);
    
    // Find a user by their blinded identifier
    rpc Find (FindRequest) returns (FindResponse);
    
    // Register a new blinded identifier-UUID pair
    rpc Register(RegisterRequest) returns (RegisterResponse);

    // Get Merkle proof for a commitment
    rpc GetMerkleProof (GetMerkleProofRequest) returns (GetMerkleProofResponse);
}

// Request for getting the current Merkle root
message GetMerkleRootRequest {}

// Response containing the current Merkle root
message GetMerkleRootResponse {
    bool success = 1;  // Whether root retrieval was successful
    string message = 2;  // Error message if unsuccessful
    bytes root = 3;  // The current Merkle root
}

// Request for getting the current Merkle root
message GetPublicSetRequest {}

// Response containing the current Merkle root
message GetPublicSetResponse {
    bytes merkle_root = 1;  // Current Merkle root for verification
}

// Request for finding a user
message FindRequest {
    bytes hash_prefix = 1;  // Prefix of the blinded identifier
    bytes zk_proof = 2;  // ZK proof of Merkle path knowledge
    bytes zk_verification_key = 3;  // Verification key for the ZK proof
}

// A bucket entry in the response
message BucketEntry {
    bytes blinded_identifier = 1;  // Client-blinded identifier
    bytes blinded_uuid = 2;  // Client-blinded UUID
}

// Response for finding a user
message FindResponse {
    repeated BucketEntry entries = 1;  // Bucket entries matching the prefix
}

// Request for registering a new identifier-UUID pair
message RegisterRequest {
    bytes blinded_identifier = 1;  // Client-blinded identifier
    bytes uuid = 2;  // UUID to register
    bytes commitment = 3;  // Commitment to the identifier
}

// Response for registration
message RegisterResponse {
    bool success = 1;  // Whether registration was successful
    string message = 2;  // Error message if unsuccessful
    bytes merkle_proof = 3;  // Merkle proof for the registered identifier
}

// Request for getting Merkle proof
message GetMerkleProofRequest {
    bytes commitment = 1;  // Commitment to get proof for
}

// Response containing Merkle proof
message GetMerkleProofResponse {
    bool success = 1;  // Whether proof generation was successful
    string message = 2;  // Error message if unsuccessful
    bytes merkle_proof = 3;  // The Merkle proof
}